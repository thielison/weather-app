(()=>{"use strict";var e={43:(e,t,n)=>{n.d(t,{A:()=>A});var r=n(354),o=n.n(r),a=n(314),i=n.n(a),c=n(417),s=n.n(c),d=new URL(n(946),n.b),u=i()(o()),l=s()(d);u.push([e.id,`:root {\n    --main-font-family: "Outfit", sans-serif;\n    --background-color: linear-gradient(0deg, #4db7f9 0%, #2c6cbc 100%);\n    --main-font-color: #ffffff;\n}\n\n* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    line-height: 1.2;\n}\n\nbody {\n    /* background-image: url("../images/drizzle.jpg"); */\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n    font-family: var(--main-font-family);\n    color: var(--main-font-color);\n    text-shadow: rgba(0, 0, 0, 0.6) 0px 0 5px;\n}\n\n.container {\n    display: grid;\n    grid-template-rows: 100px 150px 1fr 1fr;\n    align-items: center;\n    min-width: max-content;\n    max-width: 80%;\n    height: 100vh;\n    margin: auto;\n    padding: 2rem;\n}\n\n/* HEADER */\n.header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 1.5rem;\n    font-weight: 700;\n    gap: 2rem;\n}\n\n.header h1 {\n    font-size: 2.5rem;\n}\n\n.header input[type="search"] {\n    font-family: inherit;\n    color: var(--main-font-color);\n    font-size: 1rem;\n    width: 300px;\n    padding: 0.7rem 1rem 0.7rem 1rem;\n    border: 2px solid var(--main-font-color);\n    border-radius: 0.7rem;\n    background-color: transparent;\n    font-weight: 600;\n}\n\n.header input[type="search"]::placeholder {\n    color: var(--main-font-color);\n    font-weight: 600;\n}\n\n.header button {\n    font-family: inherit;\n    font-size: 1rem;\n    appearance: none;\n    border: 2px solid var(--main-font-color);\n    border-radius: 0.7rem;\n    padding: 0.7rem;\n    background-color: transparent;\n    color: var(--main-font-color);\n    font-weight: 600;\n}\n\n.header button:hover {\n    cursor: pointer;\n    background-color: #ececec84;\n}\n\n/* CITY INFO, LOCALTIME AND DATE */\nsection.city-local-time-info {\n    text-align: center;\n}\n\nsection.city-local-time-info .city {\n    letter-spacing: 3px;\n    font-weight: 800;\n    font-size: 4rem;\n}\n\nsection.city-local-time-info .localtime {\n    font-size: 1.5rem;\n    color: #fafafac7;\n    font-weight: 500;\n    letter-spacing: 2px;\n}\n\n/* CURRENT TEMPERATURE */\nsection.temperature-data {\n    align-self: center;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\nsection.temperature-data div.temp-text-info {\n    text-align: center;\n    font-weight: 400;\n}\n\nsection.temperature-data div.l-temp-h-temp {\n    display: flex;\n    font-size: 1.5rem;\n    gap: 0.5rem;\n    text-align: center;\n}\n\nsection.temperature-data div.temp-text-info p.temperature {\n    font-weight: 800;\n    font-size: 5rem;\n}\n\nsection.temperature-data div.temp-text-info p.current-climate-text {\n    font-size: 2rem;\n    font-weight: 400;\n}\n\n.temperature-scales {\n    display: flex;\n    margin-top: 1rem;\n}\n\n/* CLIMATE INFO BOXES */\nsection.climate-info-boxes {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    gap: 2rem;\n}\n\nsection.climate-info-boxes div.first-row,\nsection.climate-info-boxes div.second-row {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    text-align: center;\n    gap: 2rem;\n}\n\nsection.climate-info-boxes div.first-row div,\nsection.climate-info-boxes div.second-row div {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    width: 200px;\n    height: 100px;\n}\n\nsection.climate-info-boxes div.first-row div p:first-of-type,\nsection.climate-info-boxes div.second-row div p:first-of-type {\n    font-size: 2rem;\n    letter-spacing: 1px;\n    font-weight: 600;\n}\n\nsection.climate-info-boxes div.first-row div p:last-of-type,\nsection.climate-info-boxes div.second-row div p:last-of-type {\n    font-size: 1.5rem;\n    letter-spacing: 1px;\n    font-weight: 400;\n}\n\n/* LOADING ICON */\n.loading-icon {\n    display: none;\n    position: absolute;\n    width: 150px;\n    height: 150px;\n    background-image: url(${l});\n    background-repeat: no-repeat;\n    top: 50%;\n    left: 50%;\n    margin-left: -75px;\n    margin-top: -100px;\n}\n\ndiv.container .hidden {\n    display: none;\n}\n\n.visible {\n    display: block;\n}\n\n/* TOGGLE BUTTON C F  */\n.toggleCheckbox {\n    display: none;\n\n}\n\n.toggleContainer {\n    position: relative;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    width: fit-content;\n    border: 1px solid #ffffff;\n    border-radius: 20px;\n    background: none;\n    font-weight: bold;\n    font-size: 1rem;\n    color: #343434;\n    cursor: pointer;\n    top: -7px;\n    text-shadow: none\n}\n\n.toggleContainer::before {\n    content: '';\n    position: absolute;\n    width: 50%;\n    height: 100%;\n    left: 0%;\n    border-radius: 20px;\n    background: white;\n    transition: all 0.3s;\n}\n\n.toggleContainer div {\n    padding: 6px;\n    text-align: center;\n    z-index: 1;\n}\n\n.toggleCheckbox:checked+.toggleContainer::before {\n    left: 50%;\n}\n\n.toggleCheckbox:checked+.toggleContainer div:first-child {\n    color: white;\n    transition: color 0.3s;\n}\n\n.toggleCheckbox:checked+.toggleContainer div:last-child {\n    color: #343434;\n    transition: color 0.3s;\n}\n\n.toggleCheckbox+.toggleContainer div:first-child {\n    color: #343434;\n    transition: color 0.3s;\n}\n\n.toggleCheckbox+.toggleContainer div:last-child {\n    color: white;\n    transition: color 0.3s;\n}`,"",{version:3,sources:["webpack://./src/assets/styles/main.css"],names:[],mappings:"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",sourcesContent:[':root {\n    --main-font-family: "Outfit", sans-serif;\n    --background-color: linear-gradient(0deg, #4db7f9 0%, #2c6cbc 100%);\n    --main-font-color: #ffffff;\n}\n\n* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    line-height: 1.2;\n}\n\nbody {\n    /* background-image: url("../images/drizzle.jpg"); */\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n    font-family: var(--main-font-family);\n    color: var(--main-font-color);\n    text-shadow: rgba(0, 0, 0, 0.6) 0px 0 5px;\n}\n\n.container {\n    display: grid;\n    grid-template-rows: 100px 150px 1fr 1fr;\n    align-items: center;\n    min-width: max-content;\n    max-width: 80%;\n    height: 100vh;\n    margin: auto;\n    padding: 2rem;\n}\n\n/* HEADER */\n.header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 1.5rem;\n    font-weight: 700;\n    gap: 2rem;\n}\n\n.header h1 {\n    font-size: 2.5rem;\n}\n\n.header input[type="search"] {\n    font-family: inherit;\n    color: var(--main-font-color);\n    font-size: 1rem;\n    width: 300px;\n    padding: 0.7rem 1rem 0.7rem 1rem;\n    border: 2px solid var(--main-font-color);\n    border-radius: 0.7rem;\n    background-color: transparent;\n    font-weight: 600;\n}\n\n.header input[type="search"]::placeholder {\n    color: var(--main-font-color);\n    font-weight: 600;\n}\n\n.header button {\n    font-family: inherit;\n    font-size: 1rem;\n    appearance: none;\n    border: 2px solid var(--main-font-color);\n    border-radius: 0.7rem;\n    padding: 0.7rem;\n    background-color: transparent;\n    color: var(--main-font-color);\n    font-weight: 600;\n}\n\n.header button:hover {\n    cursor: pointer;\n    background-color: #ececec84;\n}\n\n/* CITY INFO, LOCALTIME AND DATE */\nsection.city-local-time-info {\n    text-align: center;\n}\n\nsection.city-local-time-info .city {\n    letter-spacing: 3px;\n    font-weight: 800;\n    font-size: 4rem;\n}\n\nsection.city-local-time-info .localtime {\n    font-size: 1.5rem;\n    color: #fafafac7;\n    font-weight: 500;\n    letter-spacing: 2px;\n}\n\n/* CURRENT TEMPERATURE */\nsection.temperature-data {\n    align-self: center;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\nsection.temperature-data div.temp-text-info {\n    text-align: center;\n    font-weight: 400;\n}\n\nsection.temperature-data div.l-temp-h-temp {\n    display: flex;\n    font-size: 1.5rem;\n    gap: 0.5rem;\n    text-align: center;\n}\n\nsection.temperature-data div.temp-text-info p.temperature {\n    font-weight: 800;\n    font-size: 5rem;\n}\n\nsection.temperature-data div.temp-text-info p.current-climate-text {\n    font-size: 2rem;\n    font-weight: 400;\n}\n\n.temperature-scales {\n    display: flex;\n    margin-top: 1rem;\n}\n\n/* CLIMATE INFO BOXES */\nsection.climate-info-boxes {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    gap: 2rem;\n}\n\nsection.climate-info-boxes div.first-row,\nsection.climate-info-boxes div.second-row {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    text-align: center;\n    gap: 2rem;\n}\n\nsection.climate-info-boxes div.first-row div,\nsection.climate-info-boxes div.second-row div {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    width: 200px;\n    height: 100px;\n}\n\nsection.climate-info-boxes div.first-row div p:first-of-type,\nsection.climate-info-boxes div.second-row div p:first-of-type {\n    font-size: 2rem;\n    letter-spacing: 1px;\n    font-weight: 600;\n}\n\nsection.climate-info-boxes div.first-row div p:last-of-type,\nsection.climate-info-boxes div.second-row div p:last-of-type {\n    font-size: 1.5rem;\n    letter-spacing: 1px;\n    font-weight: 400;\n}\n\n/* LOADING ICON */\n.loading-icon {\n    display: none;\n    position: absolute;\n    width: 150px;\n    height: 150px;\n    background-image: url("/src/assets/images/bouncing-circles.svg");\n    background-repeat: no-repeat;\n    top: 50%;\n    left: 50%;\n    margin-left: -75px;\n    margin-top: -100px;\n}\n\ndiv.container .hidden {\n    display: none;\n}\n\n.visible {\n    display: block;\n}\n\n/* TOGGLE BUTTON C F  */\n.toggleCheckbox {\n    display: none;\n\n}\n\n.toggleContainer {\n    position: relative;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    width: fit-content;\n    border: 1px solid #ffffff;\n    border-radius: 20px;\n    background: none;\n    font-weight: bold;\n    font-size: 1rem;\n    color: #343434;\n    cursor: pointer;\n    top: -7px;\n    text-shadow: none\n}\n\n.toggleContainer::before {\n    content: \'\';\n    position: absolute;\n    width: 50%;\n    height: 100%;\n    left: 0%;\n    border-radius: 20px;\n    background: white;\n    transition: all 0.3s;\n}\n\n.toggleContainer div {\n    padding: 6px;\n    text-align: center;\n    z-index: 1;\n}\n\n.toggleCheckbox:checked+.toggleContainer::before {\n    left: 50%;\n}\n\n.toggleCheckbox:checked+.toggleContainer div:first-child {\n    color: white;\n    transition: color 0.3s;\n}\n\n.toggleCheckbox:checked+.toggleContainer div:last-child {\n    color: #343434;\n    transition: color 0.3s;\n}\n\n.toggleCheckbox+.toggleContainer div:first-child {\n    color: #343434;\n    transition: color 0.3s;\n}\n\n.toggleCheckbox+.toggleContainer div:last-child {\n    color: white;\n    transition: color 0.3s;\n}'],sourceRoot:""}]);const A=u},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var u=[].concat(e[d]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],u=a[d]||0,l="".concat(d," ").concat(u);a[d]=u+1;var A=n(l),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var f=o(m,r);r.byIndex=c,t.splice(c,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var s=r(e,o),d=0;d<a.length;d++){var u=n(a[d]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=s}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},946:(e,t,n)=>{e.exports=n.p+"images/aa594da1fb46439f0f5f.svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0;var r=n(72),o=n.n(r),a=n(825),i=n.n(a),c=n(659),s=n.n(c),d=n(56),u=n.n(d),l=n(540),A=n.n(l),m=n(113),f=n.n(m),g=n(43),h={};function p(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}h.styleTagTransform=f(),h.setAttributes=u(),h.insert=s().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=A(),o()(g.A,h),g.A&&g.A.locals&&g.A.locals;const C={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function b(e){return(t={})=>{const n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const w={date:b({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:b({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:b({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function B(e){return(t,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&e.formattingValues){const t=e.defaultFormattingWidth||e.defaultWidth,o=n?.width?String(n.width):t;r=e.formattingValues[o]||e.formattingValues[t]}else{const t=e.defaultWidth,o=n?.width?String(n.width):e.defaultWidth;r=e.values[o]||e.values[t]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const x={ordinalNumber:(e,t)=>{const n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:B({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:B({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:B({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:B({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:B({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function v(e){return(t,n={})=>{const r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=t.match(o);if(!a)return null;const i=a[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(c)?function(e,t){for(let t=0;t<e.length;t++)if(e[t].test(i))return t}(c):function(e,t){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&e[t].test(i))return t}(c);let d;return d=e.valueCallback?e.valueCallback(s):s,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:t.slice(i.length)}}}const I={ordinalNumber:(k={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)},(e,t={})=>{const n=e.match(k.matchPattern);if(!n)return null;const r=n[0],o=e.match(k.parsePattern);if(!o)return null;let a=k.valueCallback?k.valueCallback(o[0]):o[0];return a=t.valueCallback?t.valueCallback(a):a,{value:a,rest:e.slice(r.length)}}),era:v({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:v({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:v({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:v({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:v({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var k;const E={code:"en-US",formatDistance:(e,t,n)=>{let r;const o=C[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:w,formatRelative:(e,t,n,r)=>y[e],localize:x,match:I,options:{weekStartsOn:0,firstWeekContainsDate:1}};let M={};function S(){return M}Math.pow(10,8);const T=6048e5,D=864e5;function P(e){const t=p(e);return t.setHours(0,0,0,0),t}function j(e){const t=p(e),n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),+e-+n}function O(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}function W(e){const t=p(e);return function(e,t){const n=P(e),r=P(t),o=+n-j(n),a=+r-j(r);return Math.round((o-a)/D)}(t,function(e){const t=p(e),n=O(e,0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}(t))+1}function N(e,t){const n=S(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=p(e),a=o.getDay(),i=(a<r?7:0)+a-r;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function Y(e){return N(e,{weekStartsOn:1})}function z(e){const t=p(e),n=t.getFullYear(),r=O(e,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const o=Y(r),a=O(e,0);a.setFullYear(n,0,4),a.setHours(0,0,0,0);const i=Y(a);return t.getTime()>=o.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function q(e){const t=p(e),n=+Y(t)-+function(e){const t=z(e),n=O(e,0);return n.setFullYear(t,0,4),n.setHours(0,0,0,0),Y(n)}(t);return Math.round(n/T)+1}function F(e,t){const n=p(e),r=n.getFullYear(),o=S(),a=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=O(e,0);i.setFullYear(r+1,0,a),i.setHours(0,0,0,0);const c=N(i,t),s=O(e,0);s.setFullYear(r,0,a),s.setHours(0,0,0,0);const d=N(s,t);return n.getTime()>=c.getTime()?r+1:n.getTime()>=d.getTime()?r:r-1}function L(e,t){const n=p(e),r=+N(n,t)-+function(e,t){const n=S(),r=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=F(e,t),a=O(e,0);return a.setFullYear(o,0,r),a.setHours(0,0,0,0),N(a,t)}(n,t);return Math.round(r/T)+1}function $(e,t){return(e<0?"-":"")+Math.abs(e).toString().padStart(t,"0")}const H={y(e,t){const n=e.getFullYear(),r=n>0?n:1-n;return $("yy"===t?r%100:r,t.length)},M(e,t){const n=e.getMonth();return"M"===t?String(n+1):$(n+1,2)},d:(e,t)=>$(e.getDate(),t.length),a(e,t){const n=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(e,t)=>$(e.getHours()%12||12,t.length),H:(e,t)=>$(e.getHours(),t.length),m:(e,t)=>$(e.getMinutes(),t.length),s:(e,t)=>$(e.getSeconds(),t.length),S(e,t){const n=t.length,r=e.getMilliseconds();return $(Math.trunc(r*Math.pow(10,n-3)),t.length)}},R={G:function(e,t,n){const r=e.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){const t=e.getFullYear(),r=t>0?t:1-t;return n.ordinalNumber(r,{unit:"year"})}return H.y(e,t)},Y:function(e,t,n,r){const o=F(e,r),a=o>0?o:1-o;return"YY"===t?$(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):$(a,t.length)},R:function(e,t){return $(z(e),t.length)},u:function(e,t){return $(e.getFullYear(),t.length)},Q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return $(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return $(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){const r=e.getMonth();switch(t){case"M":case"MM":return H.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){const r=e.getMonth();switch(t){case"L":return String(r+1);case"LL":return $(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){const o=L(e,r);return"wo"===t?n.ordinalNumber(o,{unit:"week"}):$(o,t.length)},I:function(e,t,n){const r=q(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):$(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getDate(),{unit:"date"}):H.d(e,t)},D:function(e,t,n){const r=W(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):$(r,t.length)},E:function(e,t,n){const r=e.getDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){const o=e.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return $(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){const o=e.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return $(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){const r=e.getDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return $(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){const r=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){const r=e.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){const r=e.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){let t=e.getHours()%12;return 0===t&&(t=12),n.ordinalNumber(t,{unit:"hour"})}return H.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getHours(),{unit:"hour"}):H.H(e,t)},K:function(e,t,n){const r=e.getHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):$(r,t.length)},k:function(e,t,n){let r=e.getHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):$(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getMinutes(),{unit:"minute"}):H.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getSeconds(),{unit:"second"}):H.s(e,t)},S:function(e,t){return H.S(e,t)},X:function(e,t,n){const r=e.getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return U(r);case"XXXX":case"XX":return G(r);default:return G(r,":")}},x:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"x":return U(r);case"xxxx":case"xx":return G(r);default:return G(r,":")}},O:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Q(r,":");default:return"GMT"+G(r,":")}},z:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Q(r,":");default:return"GMT"+G(r,":")}},t:function(e,t,n){return $(Math.trunc(e.getTime()/1e3),t.length)},T:function(e,t,n){return $(e.getTime(),t.length)}};function Q(e,t=""){const n=e>0?"-":"+",r=Math.abs(e),o=Math.trunc(r/60),a=r%60;return 0===a?n+String(o):n+String(o)+t+$(a,2)}function U(e,t){return e%60==0?(e>0?"-":"+")+$(Math.abs(e)/60,2):G(e,t)}function G(e,t=""){const n=e>0?"-":"+",r=Math.abs(e);return n+$(Math.trunc(r/60),2)+t+$(r%60,2)}const X=(e,t)=>{switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},_=(e,t)=>{switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},J={p:_,P:(e,t)=>{const n=e.match(/(P+)(p+)?/)||[],r=n[1],o=n[2];if(!o)return X(e,t);let a;switch(r){case"P":a=t.dateTime({width:"short"});break;case"PP":a=t.dateTime({width:"medium"});break;case"PPP":a=t.dateTime({width:"long"});break;default:a=t.dateTime({width:"full"})}return a.replace("{{date}}",X(r,t)).replace("{{time}}",_(o,t))}},Z=/^D+$/,V=/^Y+$/,K=["D","DD","YY","YYYY"];function ee(e){if(!(t=e,t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)||"number"==typeof e))return!1;var t;const n=p(e);return!isNaN(Number(n))}const te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ne=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,re=/^'([^]*?)'?$/,oe=/''/g,ae=/[a-zA-Z]/;function ie(e){const t=e.match(re);return t?t[1].replace(oe,"'"):e}const ce=n.p+"images/15789b33cf0d226f222f.jpeg",se=n.p+"images/e18b82af9bd8cf19d802.jpg",de=n.p+"images/328d64d6f71088351a10.jpg",ue=n.p+"images/db3fedf103ce0055c72c.jpg",le=n.p+"images/6c4cc6dcdd215843cdda.jpg",Ae=n.p+"images/c9167aae13c925a779ae.jpeg",me=n.p+"images/f073452e61cfcb9a35e7.jpg",fe=n.p+"images/711112b94293db068815.jpg",ge=n.p+"images/fb54596c31eba76f3c92.jpg",he=n.p+"images/12a652ce4a36058dce0f.jpg",pe=document.querySelector("section.city-local-time-info .city"),Ce=document.querySelector("section.city-local-time-info .localtime"),be=document.querySelector("div.temp-text-info .temperature"),we=document.querySelector("div.temp-text-info .current-climate-text"),ye=document.querySelector(".l-temp-h-temp .lowest-temp"),Be=document.querySelector(".l-temp-h-temp .highest-temp"),xe=document.querySelector(".l-temp-h-temp .feels-like-temp"),ve=document.getElementById("humidity"),Ie=document.getElementById("precipitation"),ke=document.getElementById("chance-of-rain"),Ee=document.getElementById("wind"),Me=document.getElementById("sunrise"),Se=document.getElementById("sunset"),Te=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],De=e=>{(e=>{const t=new Image;switch(e){case 1e3:t.src=he;break;case 1003:t.src=le;break;case 1006:case 1009:t.src=se;break;case 1030:case 1135:case 1147:t.src=ue;break;case 1150:case 1153:case 1168:case 1171:case 1172:t.src=de;break;case 1063:case 1180:case 1183:case 1186:case 1189:case 1192:case 1198:case 1195:case 1201:case 1240:case 1243:case 1246:t.src=Ae;break;case 1114:case 1117:case 1066:case 1210:case 1213:case 1216:case 1219:case 1222:case 1225:case 1255:case 1258:case 1279:case 1282:t.src=fe;break;case 1069:case 1204:case 1207:case 1237:case 1249:case 1252:case 1261:case 1263:t.src=me;break;case 1087:case 1273:case 1276:t.src=ge;break;default:t.src=ce}document.body.style.backgroundImage=`url("${t.src}")`})(e.code),pe.textContent=`${e.cityName}, ${e.countryName}`;const t=p(e.localDateTime).getDay();Ce.textContent=`${Te[t]} ${function(e,t,n){const r=S(),o=n?.locale??r.locale??E,a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,c=p(e);if(!ee(c))throw new RangeError("Invalid time value");let s=t.match(ne).map((e=>{const t=e[0];return"p"===t||"P"===t?(0,J[t])(e,o.formatLong):e})).join("").match(te).map((e=>{if("''"===e)return{isToken:!1,value:"'"};const t=e[0];if("'"===t)return{isToken:!1,value:ie(e)};if(R[t])return{isToken:!0,value:e};if(t.match(ae))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:e}}));o.localize.preprocessor&&(s=o.localize.preprocessor(c,s));const d={firstWeekContainsDate:a,weekStartsOn:i,locale:o};return s.map((r=>{if(!r.isToken)return r.value;const a=r.value;return(!n?.useAdditionalWeekYearTokens&&function(e){return V.test(e)}(a)||!n?.useAdditionalDayOfYearTokens&&function(e){return Z.test(e)}(a))&&function(e,t,n){const r=function(e,t,n){const r="Y"===e[0]?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(e,t,n);if(console.warn(r),K.includes(e))throw new RangeError(r)}(a,t,String(e)),(0,R[a[0]])(c,a,o.localize,d)})).join("")}(e.localDateTime,"dd MMMM yyyy | hh:mm")}`,we.textContent=e.currentCondition,ve.textContent=`${e.humidity}%`,ke.textContent=`${e.chanceOfRain}%`,Me.textContent=`${e.sunrise}`,Se.textContent=`${e.sunset}`;const n=document.querySelector(".temperature-scales").dataset.togglePosition;"C"===n?(be.textContent=`${e.currentTempC} °C`,ye.textContent=`L: ${e.lowestTempC}°`,Be.textContent=`H: ${e.highestTempC}°`,xe.textContent=`Feels Like: ${e.feelsLikeC}°`,Ie.textContent=`${e.precipitationMm}mm`,Ee.textContent=`${e.windkph}km/h`):"F"===n&&(be.textContent=`${e.currentTempF} °F`,ye.textContent=`L: ${e.lowestTempF}°`,Be.textContent=`H: ${e.highestTempF}°`,xe.textContent=`Feels Like: ${e.feelsLikeF}°`,Ie.textContent=`${e.precipitationIn}in`,Ee.textContent=`${e.windmph}mph`)},Pe=()=>{const e=document.querySelectorAll("p"),t=document.querySelector(".loading-icon");t&&t.classList.toggle("visible"),e.forEach((e=>{e.classList.toggle("hidden")}))},je=async e=>{const t=e||document.getElementById("location").value;if(e||!(()=>{const e=document.getElementById("location"),t=e.validity;return t.valueMissing?e.setCustomValidity("You need to enter a city name!"):e.setCustomValidity(""),e.reportValidity(),t.valueMissing})())try{Pe();const e=await(async e=>{try{const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=fd654da885e9428aaa611606240606&q=${e}`,{mode:"cors"});if(!t.ok)throw new Error("Network response was not OK. Try again with a different input.");const n=(e=>{let{location:t,current:n,forecast:r}=e;const{name:o,country:a,localtime:i}=t,{temp_c:c,temp_f:s,condition:{text:d},condition:{code:u},feelslike_c:l,feelslike_f:A,humidity:m,precip_mm:f,precip_in:g,wind_kph:h,wind_mph:p}=n,{mintemp_c:C,mintemp_f:b,maxtemp_c:w,maxtemp_f:y,daily_chance_of_rain:B}=r.forecastday[0].day,{sunrise:x,sunset:v}=r.forecastday[0].astro;return{cityName:o,countryName:a,localDateTime:i,currentTempC:c,currentTempF:s,currentCondition:d,lowestTempC:C,lowestTempF:b,highestTempC:w,highestTempF:y,feelsLikeC:l,feelsLikeF:A,humidity:m,precipitationMm:f,precipitationIn:g,chanceOfRain:B,windkph:h,windmph:p,sunrise:x,sunset:v,code:u}})(await t.json());return n}catch(e){throw console.error(e),e}})(t);De(e)}catch(e){alert(e)}finally{Pe()}};document.getElementById("submit-btn").addEventListener("click",(async e=>{e.preventDefault(),await je()})),document.getElementById("toggle").addEventListener("click",(async()=>{document.querySelector(".temperature-scales").dataset.togglePosition="C"===document.querySelector(".temperature-scales").dataset.togglePosition?"F":"C";const e=document.querySelector("section.city-local-time-info .city").textContent;await je(e)})),document.addEventListener("DOMContentLoaded",(async()=>{await je("New York")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,